// Generated by CoffeeScript 1.3.3
(function() {
  var array1, array2, assert, async, data1, data2, test1, test1CallbackFun, test1Fun, test2, utils,
    __slice = [].slice;

  assert = require('assert');

  utils = require('../lib/utils');

  async = require('async');

  test1 = {
    a: 2,
    b: 3
  };

  test1Fun = function() {
    return test1;
  };

  test1CallbackFun = function(cb) {
    return cb(null, test1);
  };

  test2 = {
    a: 4,
    b: 9
  };

  data1 = {
    a: 4,
    b: {
      c: 4,
      d: [5, 6]
    },
    c: 7
  };

  data2 = {
    a: 5,
    b: {
      c: 5,
      d: [6, 7]
    },
    c: 8
  };

  array1 = [1, 2, 3];

  array2 = [1, 3, 5];

  describe('utils', function() {
    describe('mapObject', function() {
      return it('should async map an object', function(done) {
        return utils.mapObject(test1, (function(key, value, cb) {
          return cb(null, value * value);
        }), function(err, res) {
          assert.equal(res.a, test2.a);
          return done();
        });
      });
    });
    describe('mapData', function() {
      return it('should async map any data', function(done) {
        var mapFun;
        mapFun = function(path, value, cb) {
          if (typeof value === 'number') {
            return cb(null, value + 1);
          } else {
            return cb();
          }
        };
        return utils.mapData(data1, mapFun, function(err, res) {
          assert.ok(res.a === data2.a && res.b.c === data2.b.c && res.b.d[0] === data2.b.d[0] && res.c === data2.c);
          return done();
        });
      });
    });
    describe('mapArray', function() {
      return it('should async map an array', function(done) {
        return utils.mapArray(array1, (function(value, index, cb) {
          return cb(null, value + index);
        }), function(err, res) {
          var each, index, _i, _len;
          for (index = _i = 0, _len = res.length; _i < _len; index = ++_i) {
            each = res[index];
            assert.equal(each, array2[index]);
          }
          return done();
        });
      });
    });
    return describe('ensure', function() {
      it('tests all three variants', function(done) {
        return async.map([test1, test1Fun, test1CallbackFun], utils.ensure, function(err, res) {
          var each, _i, _len;
          for (_i = 0, _len = res.length; _i < _len; _i++) {
            each = res[_i];
            assert.equal(each, test1);
          }
          return done();
        });
      });
      return it('tests multiple params', function(done) {
        return utils.ensure(test1, test1Fun, test1CallbackFun, function() {
          var each, err, res, _i, _len;
          err = arguments[0], res = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
          for (_i = 0, _len = res.length; _i < _len; _i++) {
            each = res[_i];
            assert.equal(each, test1);
          }
          return done();
        });
      });
    });
  });

}).call(this);
